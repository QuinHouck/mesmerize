// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "sets",
    columns: [
      { name: "title", type: "string" },
      { name: "description", type: "text" },
      { name: "private", type: "bool", defaultValue: "true" },
      { name: "image", type: "file", file: { defaultPublicAccess: true } },
      { name: "name", type: "string", unique: true },
    ],
  },
  {
    name: "countries",
    columns: [
      { name: "name", type: "string" },
      { name: "iso2", type: "string" },
      { name: "capital", type: "string" },
      { name: "currency", type: "string" },
      { name: "region", type: "string" },
      { name: "region_id", type: "int" },
      { name: "nationality", type: "string" },
      { name: "flag", type: "file", file: { defaultPublicAccess: true } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Sets = InferredTypes["sets"];
export type SetsRecord = Sets & XataRecord;

export type Countries = InferredTypes["countries"];
export type CountriesRecord = Countries & XataRecord;

export type DatabaseSchema = {
  sets: SetsRecord;
  countries: CountriesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Quinten-Houck-s-workspace-o5n5ug.us-east-1.xata.sh/db/mesmerize",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
